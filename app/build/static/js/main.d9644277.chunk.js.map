{"version":3,"sources":["theme.ts","utils.ts","contexts/GameProvider.tsx","components/Menu.tsx","components/Letter.tsx","components/Guess.tsx","components/GuessArea.tsx","components/LetterGroup.tsx","components/GuessInput.tsx","components/LetterArea.tsx","components/Game.tsx","index.js"],"names":["theme","createTheme","typography","h1","fontWeight","fontSize","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","button","textTransform","palette","primary","main","teal","secondary","grey","info","amber","warning","pink","components","MuiButtonBase","defaultProps","disableRipple","MuiButton","disableElevation","variant","size","styleOverrides","root","minWidth","sizeSmall","height","sizeMedium","sizeLarge","MuiLink","underline","appBarHeight","compareLetters","word1","word2","total","i","length","j","indexFromChar","char","charCodeAt","legalWords","LetterStatus","constructor","guessed","status","this","getNextStatus","generateWord","Math","floor","random","toUpperCase","useProvideGame","useState","target","setTarget","globalError","setGlobalError","initialLetterStatuses","range","map","_i","letterStatuses","setLetterStatuses","guesses","setGuesses","success","useMemo","guess","addGuess","useCallback","guessUpper","overlap","error","includes","toLowerCase","processGuess","guessError","currStatuses","slice","split","forEach","letter","revealed","setRevealed","toggleLetter","index","newStatus","reset","newWord","clearAnnotations","newLetterStatuses","entry","undefined","GameContext","createContext","GameProvider","children","value","Provider","useGame","useContext","Menu","drawerOpen","setDrawerOpen","toggleDrawer","Box","sx","display","Stack","direction","justifyContent","alignItems","px","py","Button","startIcon","onClick","Drawer","anchor","open","onClose","top","minHeight","xs","md","maxHeight","spacing","Typography","Letter","width","borderRadius","color","Guess","word","overlapCount","ix","ml","GuessArea","position","borderColor","light","pb","overflow","pr","LetterGroup","shouldBeGuessed","title","useEffect","console","log","Grid","item","padding","String","fromCharCode","GuessInput","onSubmit","setValue","mb","event","preventDefault","TextField","fullWidth","hiddenLabel","id","label","onChange","my","type","LetterArea","container","Alert","severity","disabled","Game","ThemeProvider","CssBaseline","backgroundColor","background","default","left","zIndex","drawer","pt","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d9644277.chunk.js","sourcesContent":["import { grey, teal, amber, pink } from \"@mui/material/colors\";\nimport { createTheme } from \"@mui/material/styles\";\n\ndeclare module \"@mui/material/styles/createTheme\" {\n  interface Theme {\n    appBarHeight: number;\n  }\n  // allow configuration using `createMuiTheme`\n  interface ThemeOptions {\n    appBarHeight?: number;\n  }\n}\n\nconst theme = createTheme({\n  typography: {\n    h1: {\n      // fontFamily: \"adobe-caslon-pro, serif\",\n      fontWeight: 600,\n      fontSize: \"6rem\",\n    },\n    h2: {\n      // fontFamily: \"adobe-caslon-pro, serif\",\n      fontWeight: 600,\n      fontSize: \"4rem\",\n    },\n    h3: {\n      // fontFamily: \"adobe-caslon-pro, serif\",\n      fontWeight: 600,\n      fontSize: \"3rem\",\n    },\n    h4: {\n      // fontFamily: \"adobe-caslon-pro, serif\",\n      fontWeight: 600,\n      fontSize: \"2.2rem\",\n    },\n    h5: {\n      // fontFamily: \"adobe-caslon-pro, serif\",\n      fontWeight: 600,\n      fontSize: \"2rem\",\n    },\n    h6: {\n      // fontFamily: \"adobe-caslon-pro, serif\",\n      fontWeight: 600,\n      fontSize: \"1.8rem\",\n    },\n    subtitle1: {\n      // fontFamily: \"Crimson Text, serif\",\n      fontWeight: 600,\n      fontSize: \"1.6rem\",\n    },\n    subtitle2: {\n      // fontFamily: \"Crimson Text, serif\",\n      fontWeight: 600,\n      fontSize: \"1.4rem\",\n    },\n    body1: {\n      // fontFamily: \"Crimson Text, serif\",\n      fontWeight: 400,\n      fontSize: \"1.4rem\",\n    },\n    body2: {\n      // fontFamily: \"Crimson Text, serif\",\n      fontWeight: 400,\n      fontSize: \"1.2rem\",\n    },\n    button: {\n      // fontFamily: \"Crimson Text, serif\",\n      fontWeight: 400,\n      fontSize: \"1.2rem\",\n      textTransform: \"none\",\n    },\n  },\n  palette: {\n    primary: {\n      main: teal[600],\n    },\n    secondary: {\n      main: grey[900],\n    },\n    info: {\n      main: amber[400],\n    },\n    warning: {\n      main: pink[400],\n    },\n  },\n  components: {\n    MuiButtonBase: {\n      defaultProps: {\n        disableRipple: true,\n      },\n    },\n    MuiButton: {\n      defaultProps: {\n        disableElevation: true,\n        variant: \"contained\",\n        size: \"medium\",\n      },\n      styleOverrides: {\n        root: {\n          minWidth: 0,\n        },\n        sizeSmall: {\n          height: \"32px\",\n        },\n        sizeMedium: {\n          height: \"40px\",\n        },\n        sizeLarge: {\n          height: \"48px\",\n        },\n      },\n    },\n    MuiLink: {\n      defaultProps: {\n        underline: \"hover\",\n      },\n    },\n  },\n  // Used for consistency in the app bar size\n  appBarHeight: 64,\n});\n\nexport default theme;\n","function compareLetters(word1: string, word2: string) {\n  var total = 0;\n  for (var i = 0; i < word1.length; i++) {\n    for (var j = 0; j < word2.length; j++) {\n      if (word1[i] === word2[j]) {\n        total++;\n      }\n    }\n  }\n  return total;\n}\n\ninterface GuessResult {\n  overlap: number;\n  error?: string;\n}\n\nexport function processGuess(guess: string, target: string): GuessResult {\n  if (guess.length !== 5) {\n    return {\n      overlap: -1,\n      error: \"Guesses must be 5 letters long.\",\n    };\n  }\n  if (!legalWords.includes(guess.toLowerCase())) {\n    return {\n      overlap: -1,\n      error: `'${guess}' is not a legal Jotto word. Legal jotto words are English words that do not end in 's' and do not repeat any letters.`,\n    };\n  } else {\n    return {\n      overlap: compareLetters(guess, target),\n    };\n  }\n}\n\nconst ALPHABET_START = 65;\n\nexport function charFromIndex(i: number) {\n  return String.fromCharCode(i + ALPHABET_START);\n}\n\nexport function indexFromChar(char: any) {\n  return char.charCodeAt() - ALPHABET_START;\n}\n\nexport const legalWords = [\n  \"their\",\n  \"about\",\n  \"would\",\n  \"other\",\n  \"could\",\n  \"write\",\n  \"first\",\n  \"water\",\n  \"after\",\n  \"right\",\n  \"think\",\n  \"place\",\n  \"sound\",\n  \"great\",\n  \"found\",\n  \"those\",\n  \"under\",\n  \"might\",\n  \"while\",\n  \"house\",\n  \"world\",\n  \"below\",\n  \"asked\",\n  \"large\",\n  \"until\",\n  \"along\",\n  \"being\",\n  \"often\",\n  \"earth\",\n  \"began\",\n  \"since\",\n  \"study\",\n  \"night\",\n  \"light\",\n  \"above\",\n  \"young\",\n  \"story\",\n  \"point\",\n  \"heard\",\n  \"whole\",\n  \"white\",\n  \"given\",\n  \"music\",\n  \"thing\",\n  \"today\",\n  \"later\",\n  \"using\",\n  \"money\",\n  \"group\",\n  \"among\",\n  \"learn\",\n  \"space\",\n  \"table\",\n  \"early\",\n  \"short\",\n  \"black\",\n  \"shown\",\n  \"front\",\n  \"voice\",\n  \"close\",\n  \"power\",\n  \"lived\",\n  \"vowel\",\n  \"taken\",\n  \"built\",\n  \"heart\",\n  \"ready\",\n  \"quite\",\n  \"bring\",\n  \"round\",\n  \"horse\",\n  \"stand\",\n  \"tried\",\n  \"least\",\n  \"field\",\n  \"whose\",\n  \"third\",\n  \"moved\",\n  \"plant\",\n  \"doing\",\n  \"heavy\",\n  \"cried\",\n  \"begin\",\n  \"woman\",\n  \"alone\",\n  \"plane\",\n  \"watch\",\n  \"wrote\",\n  \"clear\",\n  \"named\",\n  \"child\",\n  \"human\",\n  \"party\",\n  \"build\",\n  \"mouth\",\n  \"solve\",\n  \"north\",\n  \"value\",\n  \"death\",\n  \"maybe\",\n  \"shape\",\n  \"speak\",\n  \"force\",\n  \"ocean\",\n  \"women\",\n  \"metal\",\n  \"south\",\n  \"scale\",\n  \"lower\",\n  \"wrong\",\n  \"eight\",\n  \"major\",\n  \"reach\",\n  \"store\",\n  \"sight\",\n  \"board\",\n  \"cover\",\n  \"equal\",\n  \"stone\",\n  \"dance\",\n  \"spoke\",\n  \"break\",\n  \"cause\",\n  \"radio\",\n  \"basic\",\n  \"liked\",\n  \"trade\",\n  \"fresh\",\n  \"final\",\n  \"fight\",\n  \"meant\",\n  \"drive\",\n  \"spent\",\n  \"train\",\n  \"bread\",\n  \"coast\",\n  \"thick\",\n  \"brown\",\n  \"clean\",\n  \"quiet\",\n  \"sugar\",\n  \"forth\",\n  \"month\",\n  \"sharp\",\n  \"chief\",\n  \"grown\",\n  \"fruit\",\n  \"stick\",\n  \"stage\",\n  \"plain\",\n  \"drink\",\n  \"touch\",\n  \"angle\",\n  \"based\",\n  \"range\",\n  \"tired\",\n  \"older\",\n  \"spend\",\n  \"chair\",\n  \"twice\",\n  \"empty\",\n  \"alike\",\n  \"style\",\n  \"broke\",\n  \"count\",\n  \"enjoy\",\n  \"score\",\n  \"shore\",\n  \"paint\",\n  \"angry\",\n  \"crowd\",\n  \"quick\",\n  \"share\",\n  \"alive\",\n  \"noise\",\n  \"solid\",\n  \"cloth\",\n  \"drawn\",\n  \"worth\",\n  \"truck\",\n  \"piano\",\n  \"loved\",\n  \"drove\",\n  \"cabin\",\n  \"proud\",\n  \"court\",\n  \"model\",\n  \"prime\",\n  \"prove\",\n  \"price\",\n  \"raise\",\n  \"match\",\n  \"threw\",\n  \"lunch\",\n  \"chart\",\n  \"graph\",\n  \"doubt\",\n  \"guide\",\n  \"block\",\n  \"grain\",\n  \"smoke\",\n  \"mixed\",\n  \"wagon\",\n  \"topic\",\n  \"extra\",\n  \"plate\",\n  \"knife\",\n  \"cloud\",\n  \"wheat\",\n  \"broad\",\n  \"steam\",\n  \"lying\",\n  \"thank\",\n  \"storm\",\n  \"brain\",\n  \"track\",\n  \"smile\",\n  \"beach\",\n  \"stock\",\n  \"saved\",\n  \"giant\",\n  \"trail\",\n  \"ought\",\n  \"rough\",\n  \"daily\",\n  \"avoid\",\n  \"throw\",\n  \"cream\",\n  \"laugh\",\n  \"teach\",\n  \"frame\",\n  \"dream\",\n  \"magic\",\n  \"chord\",\n  \"false\",\n  \"dozen\",\n  \"brave\",\n  \"climb\",\n  \"outer\",\n  \"pitch\",\n  \"fixed\",\n  \"blank\",\n  \"labor\",\n  \"youth\",\n  \"globe\",\n  \"exact\",\n  \"brush\",\n  \"chest\",\n  \"layer\",\n  \"whale\",\n  \"minor\",\n  \"faith\",\n  \"judge\",\n  \"waste\",\n  \"hoped\",\n  \"strip\",\n  \"begun\",\n  \"aside\",\n  \"bound\",\n  \"depth\",\n  \"candy\",\n  \"worse\",\n  \"ranch\",\n  \"image\",\n  \"snake\",\n  \"aloud\",\n  \"pound\",\n  \"chain\",\n  \"shirt\",\n  \"flour\",\n  \"spite\",\n  \"orbit\",\n  \"curve\",\n  \"tribe\",\n  \"blind\",\n  \"slept\",\n  \"shade\",\n  \"claim\",\n  \"straw\",\n  \"entry\",\n  \"birth\",\n  \"anger\",\n  \"brief\",\n  \"rhyme\",\n  \"glory\",\n  \"guard\",\n  \"flesh\",\n  \"owned\",\n  \"trick\",\n  \"noted\",\n  \"width\",\n  \"burst\",\n  \"route\",\n  \"uncle\",\n  \"royal\",\n  \"forty\",\n  \"trial\",\n  \"opera\",\n  \"chose\",\n  \"owner\",\n  \"vapor\",\n  \"mouse\",\n  \"tough\",\n  \"tower\",\n  \"stuck\",\n  \"swing\",\n  \"solar\",\n  \"truly\",\n  \"split\",\n  \"weigh\",\n  \"hotel\",\n  \"pride\",\n  \"swung\",\n  \"grade\",\n  \"badly\",\n  \"pilot\",\n  \"swept\",\n  \"lucky\",\n  \"prize\",\n  \"stove\",\n  \"wound\",\n  \"slide\",\n  \"trunk\",\n  \"porch\",\n  \"slave\",\n  \"exist\",\n  \"faced\",\n  \"juice\",\n  \"raced\",\n  \"waved\",\n  \"favor\",\n  \"joint\",\n  \"blend\",\n  \"adult\",\n  \"index\",\n  \"flame\",\n  \"trace\",\n  \"waxed\",\n  \"ratio\",\n  \"dirty\",\n  \"rifle\",\n  \"shine\",\n  \"bench\",\n  \"moral\",\n  \"shake\",\n  \"movie\",\n  \"slope\",\n  \"canoe\",\n  \"fired\",\n  \"thumb\",\n  \"shout\",\n  \"habit\",\n  \"reply\",\n  \"ruled\",\n  \"crust\",\n  \"shelf\",\n  \"midst\",\n  \"print\",\n  \"rocky\",\n  \"march\",\n  \"fault\",\n  \"swift\",\n  \"faint\",\n  \"ghost\",\n  \"feast\",\n  \"blade\",\n  \"dairy\",\n  \"worst\",\n  \"rapid\",\n  \"brick\",\n  \"beast\",\n  \"skirt\",\n  \"grand\",\n  \"armed\",\n  \"honey\",\n  \"moist\",\n  \"crown\",\n  \"shock\",\n  \"sixty\",\n  \"sport\",\n  \"dying\",\n  \"drank\",\n  \"pause\",\n  \"arose\",\n  \"hated\",\n  \"novel\",\n  \"shame\",\n  \"burnt\",\n  \"flash\",\n  \"weary\",\n  \"token\",\n  \"spare\",\n  \"shiny\",\n  \"sixth\",\n  \"clerk\",\n  \"mercy\",\n  \"guest\",\n  \"float\",\n  \"shone\",\n  \"sweat\",\n  \"smart\",\n  \"upset\",\n  \"sandy\",\n  \"rainy\",\n  \"sadly\",\n  \"fancy\",\n  \"unity\",\n  \"bunch\",\n  \"crash\",\n  \"craft\",\n  \"newly\",\n  \"wider\",\n  \"grace\",\n  \"grave\",\n  \"admit\",\n  \"shift\",\n  \"tiger\",\n  \"angel\",\n  \"cruel\",\n  \"agent\",\n  \"urged\",\n  \"patch\",\n  \"vital\",\n  \"sword\",\n  \"blame\",\n  \"screw\",\n  \"vocal\",\n  \"bacon\",\n  \"chalk\",\n  \"cargo\",\n  \"crazy\",\n  \"acted\",\n  \"arise\",\n  \"witch\",\n  \"phone\",\n  \"ideal\",\n  \"beard\",\n  \"yield\",\n  \"mayor\",\n  \"input\",\n  \"apron\",\n  \"spear\",\n  \"organ\",\n  \"stamp\",\n  \"paste\",\n  \"baked\",\n  \"chase\",\n  \"slice\",\n  \"slant\",\n  \"noisy\",\n  \"wiped\",\n  \"blown\",\n  \"piled\",\n  \"stern\",\n  \"crept\",\n  \"maple\",\n  \"crime\",\n  \"ridge\",\n  \"drift\",\n  \"dusty\",\n  \"devil\",\n  \"tempo\",\n  \"humor\",\n  \"steal\",\n  \"waist\",\n  \"reign\",\n  \"noble\",\n  \"cheap\",\n  \"woven\",\n  \"hired\",\n  \"wrath\",\n  \"bowed\",\n  \"shark\",\n  \"grasp\",\n  \"blast\",\n  \"polar\",\n  \"fungi\",\n  \"pearl\",\n  \"frost\",\n  \"diver\",\n  \"phase\",\n  \"alert\",\n  \"coral\",\n  \"naked\",\n  \"spoil\",\n  \"quart\",\n  \"macro\",\n  \"flung\",\n  \"spark\",\n  \"spray\",\n  \"decay\",\n  \"urban\",\n  \"grant\",\n  \"shaft\",\n  \"bride\",\n  \"wreck\",\n  \"flock\",\n  \"stare\",\n  \"thief\",\n  \"crude\",\n  \"flute\",\n  \"tonal\",\n  \"argue\",\n  \"voted\",\n  \"cared\",\n  \"scent\",\n  \"panel\",\n  \"fairy\",\n  \"olive\",\n  \"prism\",\n  \"cable\",\n  \"peach\",\n  \"schwa\",\n  \"draft\",\n  \"charm\",\n  \"brake\",\n  \"gazed\",\n  \"delay\",\n  \"fetch\",\n  \"camel\",\n  \"purse\",\n  \"crawl\",\n  \"sauce\",\n  \"basin\",\n  \"wrist\",\n  \"fluid\",\n  \"brand\",\n  \"stalk\",\n  \"grief\",\n  \"dwelt\",\n  \"risen\",\n  \"knelt\",\n  \"fiber\",\n  \"aimed\",\n  \"lemon\",\n  \"ditch\",\n  \"drunk\",\n  \"slain\",\n  \"panic\",\n  \"tuned\",\n  \"crisp\",\n  \"swamp\",\n  \"clung\",\n  \"stole\",\n  \"liver\",\n  \"awoke\",\n  \"diary\",\n  \"trend\",\n  \"flask\",\n  \"stake\",\n  \"fried\",\n  \"actor\",\n  \"handy\",\n  \"haste\",\n  \"scope\",\n  \"thump\",\n  \"dealt\",\n  \"clown\",\n  \"roast\",\n  \"tidal\",\n  \"bored\",\n  \"chant\",\n  \"dough\",\n  \"swore\",\n  \"lover\",\n  \"punch\",\n  \"drain\",\n  \"lunar\",\n  \"pulse\",\n  \"flown\",\n  \"elbow\",\n  \"mined\",\n  \"fiery\",\n  \"mount\",\n  \"usage\",\n  \"swear\",\n  \"snowy\",\n  \"rusty\",\n  \"scare\",\n  \"relax\",\n  \"react\",\n  \"valid\",\n  \"robin\",\n  \"safer\",\n  \"salty\",\n  \"marsh\",\n  \"vague\",\n  \"mound\",\n  \"scout\",\n  \"acute\",\n  \"windy\",\n  \"pluck\",\n  \"stack\",\n  \"scarf\",\n  \"towel\",\n  \"oxide\",\n  \"rival\",\n  \"syrup\",\n  \"curly\",\n  \"cloak\",\n  \"scrap\",\n  \"ounce\",\n  \"lodge\",\n  \"paved\",\n  \"crest\",\n  \"yeast\",\n  \"bugle\",\n  \"medal\",\n  \"hound\",\n  \"snail\",\n  \"alter\",\n  \"ankle\",\n  \"relay\",\n  \"realm\",\n  \"glove\",\n  \"rayon\",\n  \"poked\",\n  \"stray\",\n  \"maker\",\n  \"graze\",\n  \"wharf\",\n  \"curse\",\n  \"cedar\",\n  \"pedal\",\n  \"anode\",\n  \"rowed\",\n  \"motel\",\n  \"ivory\",\n  \"clamp\",\n  \"barge\",\n  \"alien\",\n  \"frown\",\n  \"strap\",\n  \"shack\",\n  \"stump\",\n  \"juicy\",\n  \"glare\",\n  \"crane\",\n  \"filed\",\n  \"weird\",\n  \"shawl\",\n  \"suite\",\n  \"quilt\",\n  \"tramp\",\n  \"blaze\",\n  \"scrub\",\n  \"probe\",\n  \"logic\",\n  \"adobe\",\n  \"grind\",\n  \"sting\",\n  \"spine\",\n  \"cling\",\n  \"grove\",\n  \"prose\",\n  \"lofty\",\n  \"agony\",\n  \"snare\",\n  \"humid\",\n  \"finer\",\n  \"dimly\",\n  \"plank\",\n  \"china\",\n  \"guilt\",\n  \"brace\",\n  \"quote\",\n  \"lathe\",\n  \"gaily\",\n  \"scalp\",\n  \"adopt\",\n  \"clump\",\n  \"perch\",\n  \"tumor\",\n  \"crank\",\n  \"fable\",\n  \"sober\",\n  \"boast\",\n  \"cigar\",\n  \"unite\",\n  \"owing\",\n  \"haiku\",\n  \"frail\",\n  \"cough\",\n  \"choir\",\n  \"pouch\",\n  \"pinch\",\n  \"hairy\",\n  \"buyer\",\n  \"torch\",\n  \"vigor\",\n  \"waltz\",\n  \"flint\",\n  \"bleak\",\n  \"blunt\",\n  \"nurse\",\n  \"cured\",\n  \"ample\",\n  \"steak\",\n  \"merit\",\n  \"bathe\",\n  \"gleam\",\n  \"shear\",\n  \"gland\",\n  \"silky\",\n  \"skate\",\n  \"birch\",\n  \"anvil\",\n  \"groan\",\n  \"speck\",\n  \"drown\",\n  \"slick\",\n  \"quest\",\n  \"spied\",\n  \"stead\",\n  \"snack\",\n  \"blond\",\n  \"tamed\",\n  \"thorn\",\n  \"glued\",\n  \"banjo\",\n  \"bulky\",\n  \"carve\",\n  \"shady\",\n  \"leafy\",\n  \"notch\",\n  \"flush\",\n  \"ached\",\n  \"spout\",\n  \"smote\",\n  \"brisk\",\n  \"imply\",\n  \"demon\",\n  \"super\",\n  \"raged\",\n  \"growl\",\n  \"hardy\",\n  \"stung\",\n  \"typed\",\n  \"wiser\",\n  \"serum\",\n  \"glide\",\n  \"resin\",\n  \"lyric\",\n  \"mourn\",\n  \"aloft\",\n  \"abuse\",\n  \"whirl\",\n  \"ovary\",\n  \"quack\",\n  \"slang\",\n  \"saint\",\n  \"sonar\",\n  \"froze\",\n  \"tonic\",\n  \"swarm\",\n  \"frank\",\n  \"repay\",\n  \"gaunt\",\n  \"wired\",\n  \"stony\",\n  \"media\",\n  \"surge\",\n  \"husky\",\n  \"sworn\",\n  \"baker\",\n  \"spice\",\n  \"sneak\",\n  \"strum\",\n  \"nasty\",\n  \"rinse\",\n  \"boxer\",\n  \"shrub\",\n  \"amuse\",\n  \"cited\",\n  \"slung\",\n  \"delta\",\n  \"laden\",\n  \"crush\",\n  \"stain\",\n  \"tying\",\n  \"rated\",\n  \"zebra\",\n  \"bushy\",\n  \"scary\",\n  \"squad\",\n  \"snout\",\n  \"peril\",\n  \"pivot\",\n  \"yacht\",\n  \"viola\",\n  \"liner\",\n  \"comet\",\n  \"slate\",\n  \"misty\",\n  \"urine\",\n  \"borne\",\n  \"tenor\",\n  \"carol\",\n  \"miner\",\n  \"shaky\",\n  \"scorn\",\n  \"crate\",\n  \"tulip\",\n  \"forge\",\n  \"nymph\",\n  \"budge\",\n  \"abide\",\n  \"depot\",\n  \"fudge\",\n  \"rivet\",\n  \"thine\",\n  \"lanky\",\n  \"broth\",\n  \"gravy\",\n  \"timed\",\n  \"quail\",\n  \"inert\",\n  \"hinge\",\n  \"trash\",\n  \"clash\",\n  \"bough\",\n  \"dwarf\",\n  \"shave\",\n  \"spore\",\n  \"chunk\",\n  \"madly\",\n  \"paced\",\n  \"braid\",\n  \"slack\",\n  \"awful\",\n  \"posed\",\n  \"cider\",\n  \"taper\",\n  \"churn\",\n  \"satin\",\n  \"taxed\",\n  \"sloth\",\n  \"shale\",\n  \"tread\",\n  \"raked\",\n  \"manor\",\n  \"aisle\",\n  \"bulge\",\n  \"stair\",\n  \"squat\",\n  \"towed\",\n  \"lance\",\n  \"caste\",\n  \"poise\",\n  \"epoch\",\n  \"risky\",\n  \"fling\",\n  \"grape\",\n  \"flank\",\n  \"squid\",\n  \"irony\",\n  \"choke\",\n  \"twine\",\n  \"vault\",\n  \"scold\",\n  \"blink\",\n  \"spike\",\n  \"brink\",\n  \"widen\",\n  \"plumb\",\n  \"bison\",\n  \"argon\",\n  \"nudge\",\n  \"amber\",\n  \"rouse\",\n  \"exalt\",\n  \"leash\",\n  \"chute\",\n  \"snort\",\n  \"melon\",\n  \"cheat\",\n  \"debut\",\n  \"quota\",\n  \"prone\",\n  \"stale\",\n  \"inlet\",\n  \"flick\",\n  \"pinto\",\n  \"untie\",\n  \"batch\",\n  \"chore\",\n  \"blush\",\n  \"onset\",\n  \"laced\",\n  \"shove\",\n  \"jerky\",\n  \"godly\",\n  \"squaw\",\n  \"brute\",\n  \"nicer\",\n  \"snarl\",\n  \"showy\",\n  \"swirl\",\n  \"cobra\",\n  \"flare\",\n  \"ripen\",\n  \"whine\",\n  \"amino\",\n  \"plaid\",\n  \"spiny\",\n  \"mowed\",\n  \"baton\",\n  \"vowed\",\n  \"cleft\",\n  \"berth\",\n  \"hasty\",\n  \"latch\",\n  \"mirth\",\n  \"baron\",\n  \"plead\",\n  \"pixel\",\n  \"bared\",\n  \"hotly\",\n  \"auger\",\n  \"badge\",\n  \"stark\",\n  \"drone\",\n  \"gauze\",\n  \"shank\",\n  \"roped\",\n  \"unfit\",\n  \"mower\",\n  \"scant\",\n  \"lousy\",\n  \"album\",\n  \"sawed\",\n  \"murky\",\n  \"infer\",\n  \"burly\",\n  \"waged\",\n  \"dingy\",\n  \"brine\",\n  \"creak\",\n  \"smoky\",\n  \"spurt\",\n  \"horde\",\n  \"leapt\",\n  \"opium\",\n  \"slime\",\n  \"afire\",\n  \"pansy\",\n  \"hazel\",\n  \"lined\",\n  \"naive\",\n  \"sized\",\n  \"agile\",\n  \"fraud\",\n  \"valor\",\n  \"downy\",\n  \"psalm\",\n  \"scuba\",\n  \"polka\",\n  \"milky\",\n  \"gaudy\",\n  \"shrug\",\n  \"laser\",\n  \"siren\",\n  \"swine\",\n  \"muted\",\n  \"sinew\",\n  \"boxed\",\n  \"niche\",\n  \"whack\",\n  \"whisk\",\n  \"haven\",\n  \"clasp\",\n  \"sling\",\n  \"champ\",\n  \"piety\",\n  \"chirp\",\n  \"pleat\",\n  \"quake\",\n  \"fiend\",\n  \"caked\",\n  \"erupt\",\n  \"poker\",\n  \"olden\",\n  \"cramp\",\n  \"voter\",\n  \"manly\",\n  \"slump\",\n  \"fined\",\n  \"gaped\",\n  \"purge\",\n  \"hiked\",\n  \"maize\",\n  \"prowl\",\n  \"roach\",\n  \"bland\",\n  \"plume\",\n  \"skier\",\n  \"fused\",\n  \"latex\",\n  \"mused\",\n  \"hover\",\n  \"denim\",\n  \"leaky\",\n  \"dusky\",\n  \"filth\",\n  \"adorn\",\n  \"glaze\",\n  \"haunt\",\n  \"smelt\",\n  \"trawl\",\n  \"spicy\",\n  \"hoist\",\n  \"vicar\",\n  \"acorn\",\n  \"musty\",\n  \"truce\",\n  \"loser\",\n  \"sheaf\",\n  \"lapse\",\n  \"tawny\",\n  \"wager\",\n  \"clang\",\n  \"spade\",\n  \"sowed\",\n  \"broil\",\n  \"grunt\",\n  \"aspen\",\n  \"homer\",\n  \"croak\",\n  \"avert\",\n  \"havoc\",\n  \"hogan\",\n  \"glint\",\n  \"flaky\",\n  \"snore\",\n  \"prune\",\n  \"tiled\",\n  \"daisy\",\n  \"heron\",\n  \"farce\",\n  \"waked\",\n  \"inked\",\n  \"hyena\",\n  \"lusty\",\n  \"sonic\",\n  \"smith\",\n  \"usher\",\n  \"scaly\",\n  \"mince\",\n  \"flier\",\n  \"plied\",\n  \"patio\",\n  \"petal\",\n  \"grate\",\n  \"relic\",\n  \"phony\",\n  \"bleat\",\n  \"flake\",\n  \"aptly\",\n  \"drawl\",\n  \"ulcer\",\n  \"soapy\",\n  \"caged\",\n  \"twang\",\n  \"diner\",\n  \"taped\",\n  \"cadet\",\n  \"spawn\",\n  \"guile\",\n  \"girth\",\n  \"slimy\",\n  \"lymph\",\n  \"saucy\",\n  \"liter\",\n  \"joked\",\n  \"enact\",\n  \"stork\",\n  \"lured\",\n  \"toxic\",\n  \"covet\",\n  \"wrung\",\n  \"forum\",\n  \"venom\",\n  \"alder\",\n  \"flair\",\n  \"guild\",\n  \"stave\",\n  \"stomp\",\n  \"wring\",\n  \"lunge\",\n  \"lithe\",\n  \"loath\",\n  \"foyer\",\n  \"fared\",\n  \"crumb\",\n  \"astir\",\n  \"spire\",\n  \"jumpy\",\n  \"extol\",\n  \"lucid\",\n  \"thong\",\n  \"afore\",\n  \"dowel\",\n  \"bitch\",\n  \"scowl\",\n  \"waver\",\n  \"mason\",\n  \"ebony\",\n  \"adept\",\n  \"sedan\",\n  \"ketch\",\n  \"adore\",\n  \"mango\",\n  \"fiord\",\n  \"flora\",\n  \"exult\",\n  \"plush\",\n  \"paled\",\n  \"twain\",\n  \"clink\",\n  \"scamp\",\n  \"pawed\",\n  \"grope\",\n  \"bravo\",\n  \"gable\",\n  \"stink\",\n  \"waned\",\n  \"regal\",\n  \"unify\",\n  \"amend\",\n  \"oaken\",\n  \"glade\",\n  \"visor\",\n  \"hefty\",\n  \"throb\",\n  \"pecan\",\n  \"flyer\",\n  \"saber\",\n  \"nomad\",\n  \"miter\",\n  \"tangy\",\n  \"freak\",\n  \"vogue\",\n  \"tunic\",\n  \"dumpy\",\n  \"firth\",\n  \"nosed\",\n  \"clank\",\n  \"dogma\",\n  \"bloat\",\n  \"graft\",\n  \"stile\",\n  \"finch\",\n  \"sperm\",\n  \"amigo\",\n  \"copra\",\n  \"eying\",\n  \"twirl\",\n  \"lurch\",\n  \"smock\",\n  \"guise\",\n  \"shoal\",\n  \"tapir\",\n  \"deity\",\n  \"shorn\",\n  \"raven\",\n  \"hoary\",\n  \"corny\",\n  \"rouge\",\n  \"edict\",\n  \"sulky\",\n  \"groin\",\n  \"baste\",\n  \"moldy\",\n  \"franc\",\n  \"inept\",\n  \"gusty\",\n  \"facet\",\n  \"equip\",\n  \"slink\",\n  \"cater\",\n  \"dowry\",\n  \"yearn\",\n  \"decoy\",\n  \"spilt\",\n  \"endow\",\n  \"waken\",\n  \"chimp\",\n  \"fumed\",\n  \"vinyl\",\n  \"clout\",\n  \"smirk\",\n  \"surly\",\n  \"frock\",\n  \"foray\",\n  \"query\",\n  \"mired\",\n  \"blare\",\n  \"froth\",\n  \"gruel\",\n  \"navel\",\n  \"paler\",\n  \"grime\",\n  \"derby\",\n  \"gavel\",\n  \"vomit\",\n  \"wield\",\n  \"viper\",\n  \"louse\",\n  \"abhor\",\n  \"wrest\",\n  \"waxen\",\n  \"pored\",\n  \"loped\",\n  \"fishy\",\n  \"knead\",\n  \"quirk\",\n  \"rugby\",\n  \"lurid\",\n  \"thyme\",\n  \"valet\",\n  \"caper\",\n  \"chime\",\n  \"famed\",\n  \"smite\",\n  \"neigh\",\n  \"robed\",\n  \"hoard\",\n  \"salve\",\n  \"gawky\",\n  \"craze\",\n  \"gloat\",\n  \"mushy\",\n  \"wince\",\n  \"shalt\",\n  \"shred\",\n  \"shrew\",\n  \"filmy\",\n  \"dogie\",\n  \"poled\",\n  \"spank\",\n  \"gayer\",\n  \"tepid\",\n  \"flirt\",\n  \"rogue\",\n  \"spiky\",\n  \"miser\",\n  \"balmy\",\n  \"brawl\",\n  \"aphid\",\n  \"faked\",\n  \"hydra\",\n  \"chide\",\n  \"video\",\n  \"chasm\",\n  \"impel\",\n  \"savor\",\n  \"proxy\",\n  \"clove\",\n  \"tardy\",\n  \"grimy\",\n  \"ultra\",\n  \"meaty\",\n  \"halve\",\n  \"mauve\",\n  \"envoy\",\n  \"arson\",\n  \"scour\",\n  \"suing\",\n  \"wordy\",\n  \"coupe\",\n  \"molar\",\n  \"ashen\",\n  \"askew\",\n  \"munch\",\n  \"divan\",\n  \"jumbo\",\n  \"spunk\",\n  \"acrid\",\n  \"topaz\",\n  \"cubed\",\n  \"lamed\",\n  \"mated\",\n  \"brunt\",\n  \"tuber\",\n  \"tinge\",\n  \"bayou\",\n  \"mulch\",\n  \"palsy\",\n  \"vista\",\n  \"aster\",\n  \"baled\",\n  \"hovel\",\n  \"crave\",\n  \"optic\",\n  \"knave\",\n  \"razed\",\n  \"skein\",\n  \"yoked\",\n  \"sprig\",\n  \"pined\",\n  \"perky\",\n  \"tripe\",\n  \"prong\",\n  \"antic\",\n  \"sidle\",\n  \"pithy\",\n  \"joker\",\n  \"fleck\",\n  \"scram\",\n  \"bogey\",\n  \"irate\",\n  \"coped\",\n  \"aired\",\n  \"vying\",\n  \"strew\",\n  \"yodel\",\n  \"baser\",\n  \"belch\",\n  \"gnash\",\n  \"chewy\",\n  \"snipe\",\n  \"umbra\",\n  \"brawn\",\n  \"voile\",\n  \"woken\",\n  \"fjord\",\n  \"sheik\",\n  \"saner\",\n  \"drape\",\n  \"sulfa\",\n  \"grist\",\n  \"skied\",\n  \"vixen\",\n  \"civet\",\n  \"vouch\",\n  \"homey\",\n  \"moped\",\n  \"amble\",\n  \"datum\",\n  \"musky\",\n  \"pigmy\",\n  \"gnome\",\n  \"ravel\",\n  \"ovule\",\n  \"liken\",\n  \"lemur\",\n  \"waive\",\n  \"horny\",\n  \"wreak\",\n  \"lynch\",\n  \"stank\",\n  \"idler\",\n  \"abort\",\n  \"blitz\",\n  \"atone\",\n  \"bingo\",\n  \"scald\",\n  \"elfin\",\n  \"crone\",\n  \"sable\",\n  \"shirk\",\n  \"enrol\",\n  \"filet\",\n  \"refit\",\n  \"covey\",\n  \"fitly\",\n  \"wanly\",\n  \"jaunt\",\n  \"whelp\",\n  \"cleat\",\n  \"gauzy\",\n  \"dirge\",\n  \"wormy\",\n  \"smear\",\n  \"bowel\",\n  \"frisk\",\n  \"bayed\",\n  \"befit\",\n  \"wafer\",\n  \"feign\",\n  \"larch\",\n  \"pried\",\n  \"irked\",\n  \"aspic\",\n  \"swipe\",\n  \"mealy\",\n  \"skimp\",\n  \"bluer\",\n  \"slake\",\n  \"flunk\",\n  \"phlox\",\n  \"gripe\",\n  \"peony\",\n  \"douse\",\n  \"slunk\",\n  \"frond\",\n  \"ingot\",\n  \"evict\",\n  \"singe\",\n  \"shyer\",\n  \"flied\",\n  \"whelk\",\n  \"jibed\",\n  \"sirup\",\n  \"squab\",\n  \"foxed\",\n  \"plait\",\n  \"chafe\",\n  \"cower\",\n  \"toyed\",\n  \"copse\",\n  \"ailed\",\n  \"abler\",\n  \"rabid\",\n  \"croup\",\n  \"snaky\",\n  \"boned\",\n  \"wispy\",\n  \"raved\",\n  \"junky\",\n  \"doily\",\n  \"tamer\",\n  \"poach\",\n  \"gumbo\",\n  \"daunt\",\n  \"prank\",\n  \"buxom\",\n  \"unbar\",\n  \"remit\",\n  \"deign\",\n  \"stunk\",\n  \"soled\",\n  \"cased\",\n  \"cowed\",\n  \"aping\",\n  \"zoned\",\n  \"roved\",\n  \"toned\",\n  \"pared\",\n  \"satyr\",\n  \"bused\",\n  \"cruet\",\n  \"filch\",\n  \"pokey\",\n  \"shuck\",\n  \"viler\",\n  \"prude\",\n  \"bogie\",\n  \"pinky\",\n  \"lowed\",\n  \"biked\",\n  \"qualm\",\n  \"caned\",\n  \"dunce\",\n  \"crony\",\n  \"joist\",\n  \"boner\",\n  \"parch\",\n  \"bigot\",\n  \"leach\",\n  \"gushy\",\n  \"huger\",\n  \"slyer\",\n  \"arced\",\n  \"cored\",\n  \"jawed\",\n  \"bylaw\",\n  \"nifty\",\n  \"clued\",\n  \"vireo\",\n  \"cuter\",\n  \"cupid\",\n  \"eking\",\n  \"fogey\",\n  \"grump\",\n  \"blimp\",\n  \"hosed\",\n  \"gulch\",\n  \"bagel\",\n  \"goner\",\n  \"paged\",\n  \"talon\",\n  \"flout\",\n  \"medic\",\n  \"blurt\",\n  \"acing\",\n  \"okapi\",\n  \"decal\",\n  \"novae\",\n  \"lamer\",\n  \"meany\",\n  \"drake\",\n  \"mocha\",\n  \"oiled\",\n  \"roman\",\n  \"ethyl\",\n  \"smack\",\n  \"gourd\",\n  \"bumpy\",\n  \"radix\",\n  \"borax\",\n  \"cubit\",\n  \"focal\",\n  \"versa\",\n  \"adieu\",\n  \"howdy\",\n  \"rhino\",\n  \"axiom\",\n  \"setup\",\n  \"mixer\",\n  \"abode\",\n  \"junta\",\n  \"overt\",\n  \"kinda\",\n  \"spelt\",\n  \"prick\",\n  \"nobly\",\n  \"ephod\",\n  \"audio\",\n  \"modal\",\n  \"veldt\",\n  \"warty\",\n  \"fluke\",\n  \"bream\",\n  \"rosin\",\n  \"beady\",\n  \"motif\",\n  \"mould\",\n  \"glyph\",\n  \"azure\",\n  \"blest\",\n  \"lumpy\",\n  \"beryl\",\n  \"tuner\",\n  \"rowdy\",\n  \"mural\",\n  \"timer\",\n  \"canst\",\n  \"quoth\",\n  \"triad\",\n  \"amply\",\n  \"padre\",\n  \"leant\",\n  \"pacer\",\n  \"octal\",\n  \"sumac\",\n  \"foamy\",\n  \"giver\",\n  \"codex\",\n  \"unwed\",\n  \"vodka\",\n  \"ferny\",\n  \"salon\",\n  \"duple\",\n  \"inter\",\n  \"whist\",\n  \"spake\",\n  \"decor\",\n  \"mover\",\n  \"ethic\",\n  \"gamut\",\n  \"lingo\",\n  \"align\",\n  \"incur\",\n  \"waxer\",\n  \"calyx\",\n  \"basil\",\n  \"piney\",\n  \"winch\",\n  \"saith\",\n  \"heady\",\n  \"harem\",\n  \"shied\",\n  \"saver\",\n  \"tilde\",\n  \"jingo\",\n  \"bower\",\n  \"serif\",\n  \"facto\",\n  \"inset\",\n  \"caved\",\n  \"forte\",\n  \"credo\",\n  \"aglow\",\n  \"glean\",\n  \"gusto\",\n  \"hymen\",\n  \"brash\",\n  \"scrip\",\n  \"aleph\",\n  \"itchy\",\n  \"trice\",\n  \"garde\",\n  \"boric\",\n  \"sower\",\n  \"henry\",\n  \"spurn\",\n  \"sabre\",\n  \"rebut\",\n  \"penal\",\n  \"quirt\",\n  \"pique\",\n  \"negro\",\n  \"hadst\",\n  \"gecko\",\n  \"quint\",\n  \"clunk\",\n  \"raped\",\n  \"salvo\",\n  \"matey\",\n  \"hertz\",\n  \"xylem\",\n  \"cawed\",\n  \"wench\",\n  \"sorta\",\n  \"tango\",\n  \"aleck\",\n  \"clomp\",\n  \"gored\",\n  \"bandy\",\n  \"runic\",\n  \"fated\",\n  \"wiper\",\n  \"briny\",\n  \"staid\",\n  \"ochre\",\n  \"soupy\",\n  \"swath\",\n  \"cameo\",\n  \"spate\",\n  \"servo\",\n  \"welch\",\n  \"ghoul\",\n  \"vitae\",\n  \"cumin\",\n  \"dinky\",\n  \"bronc\",\n  \"tabor\",\n  \"comer\",\n  \"sired\",\n  \"privy\",\n  \"deary\",\n  \"sprit\",\n  \"conga\",\n  \"quire\",\n  \"bloke\",\n  \"bawdy\",\n  \"cadre\",\n  \"toxin\",\n  \"picky\",\n  \"stein\",\n  \"audit\",\n  \"fagot\",\n  \"letup\",\n  \"fount\",\n  \"caped\",\n  \"amuck\",\n  \"riled\",\n  \"umber\",\n  \"miler\",\n  \"fibre\",\n  \"bated\",\n  \"bilge\",\n  \"vitro\",\n  \"feint\",\n  \"pudgy\",\n  \"mater\",\n  \"manic\",\n  \"umped\",\n  \"pesky\",\n  \"strep\",\n  \"slurp\",\n  \"pylon\",\n  \"caret\",\n  \"rangy\",\n  \"mangy\",\n  \"loner\",\n  \"afoul\",\n  \"carne\",\n  \"amity\",\n  \"suave\",\n  \"curvy\",\n  \"newsy\",\n  \"anise\",\n  \"liven\",\n  \"opted\",\n  \"canto\",\n  \"curio\",\n  \"wrack\",\n  \"hiker\",\n  \"chive\",\n  \"yokel\",\n  \"demur\",\n  \"laity\",\n  \"toner\",\n  \"decry\",\n  \"saute\",\n  \"aught\",\n  \"tipsy\",\n  \"ducal\",\n  \"bidet\",\n  \"bulgy\",\n  \"unary\",\n  \"goeth\",\n  \"baler\",\n  \"sited\",\n  \"brung\",\n  \"holed\",\n  \"swank\",\n  \"loamy\",\n  \"binge\",\n  \"shunt\",\n  \"femur\",\n  \"libra\",\n  \"honed\",\n  \"coypu\",\n  \"zowie\",\n  \"jihad\",\n  \"nadir\",\n  \"monic\",\n  \"maned\",\n  \"mousy\",\n  \"omega\",\n  \"laver\",\n  \"prima\",\n  \"balky\",\n  \"crimp\",\n  \"chink\",\n  \"splat\",\n  \"vaunt\",\n  \"cutie\",\n  \"pasty\",\n  \"moray\",\n  \"islet\",\n  \"joust\",\n  \"viral\",\n  \"comfy\",\n  \"voila\",\n  \"blued\",\n  \"whomp\",\n  \"sward\",\n  \"metro\",\n  \"chine\",\n  \"bowie\",\n  \"coati\",\n  \"unzip\",\n  \"trike\",\n  \"funky\",\n  \"ducat\",\n  \"skoal\",\n  \"taker\",\n  \"getup\",\n  \"stoic\",\n  \"synod\",\n  \"runty\",\n  \"braze\",\n  \"inlay\",\n  \"peaty\",\n  \"humpy\",\n  \"radon\",\n  \"beaut\",\n  \"raspy\",\n  \"unfed\",\n  \"vizor\",\n  \"divot\",\n  \"vetch\",\n  \"squib\",\n  \"sitar\",\n  \"matzo\",\n  \"lager\",\n  \"dicta\",\n  \"fakir\",\n  \"knurl\",\n  \"julep\",\n  \"tacky\",\n  \"stoke\",\n  \"kaput\",\n  \"butch\",\n  \"croft\",\n  \"nodal\",\n  \"spiel\",\n  \"fetid\",\n  \"cagey\",\n  \"fudgy\",\n  \"epoxy\",\n  \"hanky\",\n  \"felon\",\n  \"melba\",\n  \"turbo\",\n  \"hoagy\",\n  \"moult\",\n  \"helix\",\n  \"zonal\",\n  \"nosey\",\n  \"lacey\",\n  \"swain\",\n  \"retch\",\n  \"whiny\",\n  \"ogled\",\n  \"rumen\",\n  \"begot\",\n  \"cruse\",\n  \"riven\",\n  \"sigma\",\n  \"unset\",\n  \"sated\",\n  \"odium\",\n  \"latin\",\n  \"moire\",\n  \"scion\",\n  \"kraut\",\n  \"lifer\",\n  \"gazer\",\n  \"tempi\",\n  \"snuck\",\n  \"scarp\",\n  \"sepia\",\n  \"carob\",\n  \"poser\",\n  \"verso\",\n  \"joule\",\n  \"baize\",\n  \"scrim\",\n  \"clave\",\n  \"lumen\",\n  \"chump\",\n  \"trump\",\n  \"fichu\",\n  \"chomp\",\n  \"purty\",\n  \"maser\",\n  \"patsy\",\n  \"swami\",\n  \"lobed\",\n  \"natch\",\n  \"tansy\",\n  \"payer\",\n  \"altho\",\n  \"laxer\",\n  \"dingo\",\n  \"quasi\",\n  \"septa\",\n  \"peaky\",\n  \"seamy\",\n  \"imbue\",\n  \"chary\",\n  \"phyla\",\n  \"clime\",\n  \"wacky\",\n  \"crypt\",\n  \"inure\",\n  \"outen\",\n  \"faire\",\n  \"anole\",\n  \"calve\",\n  \"limbo\",\n  \"argot\",\n  \"ducky\",\n  \"faker\",\n  \"unlit\",\n  \"nervy\",\n  \"biter\",\n  \"fiche\",\n  \"recap\",\n  \"synch\",\n  \"facie\",\n  \"dicey\",\n  \"ouija\",\n  \"legit\",\n  \"edify\",\n  \"tweak\",\n  \"caron\",\n  \"hater\",\n  \"lefty\",\n  \"mogul\",\n  \"debug\",\n  \"splay\",\n  \"nixed\",\n  \"snide\",\n  \"horsy\",\n  \"trove\",\n  \"pater\",\n  \"cadge\",\n  \"skyed\",\n  \"hokum\",\n  \"furze\",\n  \"curie\",\n  \"nutsy\",\n  \"hilum\",\n  \"remix\",\n  \"angst\",\n  \"veiny\",\n  \"befog\",\n  \"gamed\",\n  \"flume\",\n  \"butyl\",\n  \"mynah\",\n  \"donut\",\n  \"wurst\",\n  \"quash\",\n  \"hayed\",\n  \"cushy\",\n  \"spacy\",\n  \"puked\",\n  \"prink\",\n  \"tesla\",\n  \"intro\",\n  \"fiver\",\n  \"frump\",\n  \"opine\",\n  \"coder\",\n  \"namer\",\n  \"jowly\",\n  \"haled\",\n  \"chard\",\n  \"bruin\",\n  \"whang\",\n  \"silty\",\n  \"neato\",\n  \"decaf\",\n  \"softy\",\n  \"adlib\",\n  \"shoed\",\n  \"noway\",\n  \"gamey\",\n  \"sarge\",\n  \"epact\",\n  \"coned\",\n  \"upend\",\n  \"narco\",\n  \"whorl\",\n  \"posit\",\n  \"marge\",\n  \"vegan\",\n  \"biped\",\n  \"bunco\",\n  \"hokey\",\n  \"maven\",\n  \"nacho\",\n  \"debit\",\n  \"randy\",\n  \"bosun\",\n  \"pesto\",\n  \"antsy\",\n  \"dorky\",\n  \"moxie\",\n  \"thane\",\n  \"mylar\",\n  \"gamin\",\n  \"gouty\",\n  \"goyim\",\n  \"paned\",\n  \"rehab\",\n  \"gofer\",\n  \"homed\",\n  \"anted\",\n  \"dowse\",\n  \"scone\",\n  \"drily\",\n  \"hyper\",\n  \"gated\",\n  \"unjam\",\n  \"mitre\",\n  \"venal\",\n  \"knish\",\n  \"ritzy\",\n  \"mange\",\n  \"dimer\",\n  \"recut\",\n  \"meson\",\n  \"wined\",\n  \"phage\",\n  \"caulk\",\n  \"cavil\",\n  \"panty\",\n  \"botch\",\n  \"estop\",\n  \"ahold\",\n  \"pager\",\n  \"fixer\",\n  \"wacko\",\n  \"rebid\",\n  \"grout\",\n  \"grift\",\n  \"deify\",\n  \"piton\",\n  \"disco\",\n  \"whore\",\n  \"gibed\",\n  \"amour\",\n  \"durst\",\n  \"wader\",\n  \"glitz\",\n  \"barmy\",\n  \"gizmo\",\n  \"owlet\",\n  \"sayer\",\n  \"shard\",\n  \"vapid\",\n  \"cairn\",\n  \"deism\",\n  \"mixup\",\n  \"prosy\",\n  \"reify\",\n  \"clone\",\n  \"hazed\",\n  \"macho\",\n  \"recto\",\n  \"refix\",\n  \"biker\",\n  \"porky\",\n  \"doyen\",\n  \"jived\",\n  \"hulky\",\n  \"cager\",\n  \"harpy\",\n  \"oldie\",\n  \"admix\",\n  \"zilch\",\n  \"deist\",\n  \"pilaf\",\n  \"parse\",\n  \"zingy\",\n  \"micro\",\n  \"girly\",\n  \"gnarl\",\n  \"tromp\",\n  \"grail\",\n  \"roust\",\n  \"mosey\",\n  \"kefir\",\n  \"unmet\",\n  \"cuspy\",\n  \"sepal\",\n  \"quark\",\n  \"toked\",\n  \"prate\",\n  \"hawed\",\n  \"toker\",\n  \"doper\",\n  \"linty\",\n  \"foist\",\n  \"twerp\",\n  \"zesty\",\n  \"capon\",\n  \"wimpy\",\n  \"fungo\",\n  \"frosh\",\n  \"pinko\",\n  \"heist\",\n  \"sutra\",\n  \"dinar\",\n  \"busty\",\n  \"houri\",\n  \"swart\",\n  \"gutsy\",\n  \"faxed\",\n  \"pushy\",\n  \"mufti\",\n  \"duper\",\n  \"ogler\",\n  \"throe\",\n  \"waled\",\n  \"viand\",\n  \"coset\",\n  \"snafu\",\n  \"ascot\",\n  \"dopey\",\n  \"envoi\",\n  \"umpty\",\n  \"gismo\",\n  \"fazed\",\n  \"strop\",\n  \"batik\",\n  \"sonly\",\n  \"prawn\",\n  \"campy\",\n  \"prexy\",\n  \"toady\",\n  \"hider\",\n  \"nuked\",\n  \"fatso\",\n  \"hyped\",\n  \"poset\",\n  \"scrod\",\n  \"futon\",\n  \"tuple\",\n  \"carom\",\n  \"artsy\",\n  \"toped\",\n  \"psych\",\n  \"sicko\",\n  \"klutz\",\n  \"coxed\",\n  \"piker\",\n  \"aimer\",\n  \"flack\",\n  \"dutch\",\n  \"mucky\",\n  \"shire\",\n  \"klieg\",\n  \"staph\",\n  \"layup\",\n  \"axing\",\n  \"toper\",\n  \"duvet\",\n  \"cowry\",\n  \"suety\",\n  \"gouda\",\n  \"taupe\",\n  \"duchy\",\n  \"nitro\",\n  \"carny\",\n  \"limey\",\n  \"taxer\",\n  \"ruble\",\n  \"coked\",\n  \"gimel\",\n  \"gorse\",\n  \"goest\",\n  \"admen\",\n  \"thwap\",\n  \"belay\",\n  \"gluey\",\n  \"bitsy\",\n  \"hilar\",\n  \"fetal\",\n  \"renal\",\n  \"culpa\",\n  \"feist\",\n  \"fusty\",\n  \"eclat\",\n  \"perdu\",\n  \"mayst\",\n  \"supra\",\n  \"wetly\",\n  \"plasm\",\n  \"carte\",\n  \"haute\",\n  \"forma\",\n  \"bueno\",\n  \"rheum\",\n  \"scurf\",\n  \"doest\",\n  \"sprue\",\n  \"dieth\",\n  \"miked\",\n  \"bronx\",\n  \"plumy\",\n  \"yourn\",\n  \"bipod\",\n  \"spume\",\n  \"ambit\",\n  \"mucho\",\n  \"spued\",\n  \"dozer\",\n  \"harum\",\n  \"groat\",\n  \"skint\",\n  \"laude\",\n  \"thrum\",\n  \"oncet\",\n  \"rimed\",\n  \"limed\",\n  \"plein\",\n  \"redly\",\n  \"humpf\",\n  \"absit\",\n  \"thanx\",\n  \"pshaw\",\n  \"payed\",\n  \"youse\",\n  \"gwine\",\n  \"lento\",\n  \"spitz\",\n  \"yawed\",\n  \"gipsy\",\n  \"sprat\",\n  \"cornu\",\n  \"blowy\",\n  \"lubra\",\n  \"coqui\",\n  \"dicot\",\n  \"astro\",\n  \"kited\",\n  \"ouzel\",\n  \"axmen\",\n  \"teary\",\n  \"largo\",\n  \"sylph\",\n  \"toque\",\n  \"fugit\",\n  \"plunk\",\n  \"lucre\",\n  \"whipt\",\n  \"folky\",\n  \"corky\",\n  \"rayed\",\n  \"chile\",\n  \"begat\",\n  \"litre\",\n  \"rebox\",\n  \"hydro\",\n  \"milch\",\n  \"brent\",\n  \"lazed\",\n  \"inapt\",\n  \"baulk\",\n  \"scrum\",\n  \"wised\",\n  \"dower\",\n  \"kyrie\",\n  \"feuar\",\n  \"ohmic\",\n  \"juste\",\n  \"ukase\",\n  \"beaux\",\n  \"tusky\",\n  \"orate\",\n  \"musta\",\n  \"lardy\",\n  \"intra\",\n  \"epsom\",\n  \"neath\",\n  \"ocher\",\n  \"tared\",\n  \"beaky\",\n  \"infra\",\n  \"manse\",\n  \"curia\",\n  \"talky\",\n  \"amide\",\n  \"dolce\",\n  \"blash\",\n  \"pruta\",\n  \"tench\",\n  \"swarf\",\n  \"pawky\",\n  \"limen\",\n  \"chert\",\n  \"brack\",\n  \"welsh\",\n  \"ileum\",\n  \"noire\",\n  \"firma\",\n  \"podgy\",\n  \"laird\",\n  \"thunk\",\n  \"shute\",\n  \"rowan\",\n  \"shoji\",\n  \"poesy\",\n  \"uncap\",\n  \"costa\",\n  \"solum\",\n  \"imago\",\n  \"fondu\",\n  \"coney\",\n  \"dictu\",\n  \"sherd\",\n  \"wroth\",\n  \"unbox\",\n  \"vacuo\",\n  \"slued\",\n  \"wiled\",\n  \"muser\",\n  \"excon\",\n  \"sibyl\",\n  \"lotsa\",\n  \"lepta\",\n  \"plash\",\n  \"wheal\",\n  \"imbed\",\n  \"bruit\",\n  \"punky\",\n  \"livre\",\n  \"biome\",\n  \"degum\",\n  \"dungy\",\n  \"vitam\",\n  \"wedgy\",\n  \"ridgy\",\n  \"wifey\",\n  \"bunko\",\n  \"bodge\",\n  \"brant\",\n  \"davit\",\n  \"liker\",\n  \"treap\",\n  \"ligne\",\n  \"acked\",\n  \"vower\",\n  \"churl\",\n  \"whump\",\n  \"tiler\",\n  \"haler\",\n  \"twiny\",\n  \"poste\",\n  \"unrig\",\n  \"prise\",\n  \"facer\",\n  \"spier\",\n  \"baric\",\n  \"geoid\",\n  \"remap\",\n  \"steno\",\n  \"stoma\",\n  \"ovate\",\n  \"torah\",\n  \"exurb\",\n  \"defog\",\n  \"nuder\",\n  \"bosky\",\n  \"mothy\",\n  \"joyed\",\n  \"bigly\",\n  \"faxer\",\n  \"dishy\",\n  \"vised\",\n  \"pismo\",\n  \"scudi\",\n  \"ioctl\",\n  \"unhip\",\n  \"krone\",\n  \"sager\",\n  \"verst\",\n  \"expat\",\n  \"gronk\",\n  \"shawm\",\n  \"bilgy\",\n  \"cento\",\n  \"gamic\",\n  \"lordy\",\n  \"mazed\",\n  \"shoat\",\n  \"faery\",\n  \"diazo\",\n  \"zloty\",\n  \"unapt\",\n  \"fecal\",\n  \"taxon\",\n  \"spina\",\n  \"stoae\",\n  \"yenta\",\n  \"buret\",\n  \"oared\",\n  \"herby\",\n  \"oakum\",\n  \"sepoy\",\n  \"winey\",\n  \"giber\",\n  \"ousel\",\n  \"umiak\",\n  \"azine\",\n  \"bumph\",\n  \"coyer\",\n  \"honky\",\n  \"gamer\",\n  \"waspy\",\n  \"sedgy\",\n  \"junco\",\n  \"pubic\",\n  \"wilco\",\n  \"schmo\",\n  \"noter\",\n  \"orbed\",\n  \"shako\",\n  \"sebum\",\n  \"lobar\",\n  \"riced\",\n  \"unsew\",\n  \"krona\",\n  \"limby\",\n  \"caner\",\n  \"jiber\",\n  \"washy\",\n  \"unarm\",\n  \"waker\",\n  \"gimpy\",\n  \"guano\",\n  \"oring\",\n  \"aider\",\n  \"klugy\",\n  \"monte\",\n  \"golem\",\n  \"velar\",\n  \"pieta\",\n  \"umbel\",\n  \"campo\",\n  \"unpeg\",\n  \"fovea\",\n  \"asker\",\n  \"vocab\",\n  \"vined\",\n  \"loper\",\n  \"spang\",\n  \"grapy\",\n  \"ichor\",\n  \"kilty\",\n  \"torsi\",\n  \"resaw\",\n  \"lawny\",\n  \"coven\",\n  \"mujik\",\n  \"therm\",\n  \"shnor\",\n  \"trued\",\n  \"zayin\",\n  \"liest\",\n  \"roily\",\n  \"dipso\",\n  \"pseud\",\n  \"obeah\",\n  \"twink\",\n  \"palmy\",\n  \"pocky\",\n  \"recta\",\n  \"plonk\",\n  \"nicad\",\n  \"inker\",\n  \"ulnar\",\n  \"eruct\",\n  \"oiler\",\n  \"dreck\",\n  \"dater\",\n  \"tubal\",\n  \"voxel\",\n  \"actin\",\n  \"ghoti\",\n  \"grody\",\n  \"email\",\n  \"pyxie\",\n  \"rived\",\n  \"hoper\",\n  \"lapin\",\n  \"petri\",\n  \"phial\",\n  \"fugal\",\n  \"shier\",\n  \"hayer\",\n  \"porgy\",\n  \"hived\",\n  \"litho\",\n  \"fisty\",\n  \"stagy\",\n  \"luvya\",\n  \"yogic\",\n  \"fawny\",\n  \"amine\",\n  \"gonad\",\n  \"twirp\",\n  \"plyer\",\n  \"fermi\",\n  \"niter\",\n  \"unate\",\n  \"gyved\",\n  \"honer\",\n  \"dicer\",\n  \"monad\",\n  \"cruft\",\n  \"quoin\",\n  \"fumer\",\n  \"amped\",\n  \"shlep\",\n  \"vinca\",\n  \"moper\",\n  \"nudie\",\n  \"miaow\",\n  \"mazer\",\n  \"stoup\",\n  \"debar\",\n  \"defun\",\n  \"blear\",\n  \"paver\",\n  \"sprog\",\n  \"pawer\",\n  \"maced\",\n  \"kluge\",\n  \"tubed\",\n  \"sahib\",\n  \"ganef\",\n  \"sputa\",\n  \"vaned\",\n  \"acned\",\n  \"taxol\",\n  \"plink\",\n  \"oweth\",\n  \"resay\",\n  \"boule\",\n  \"haply\",\n  \"quoit\",\n  \"alkyd\",\n  \"glary\",\n  \"beamy\",\n  \"hexad\",\n  \"tecum\",\n  \"filar\",\n  \"redux\",\n  \"fader\",\n  \"shoer\",\n  \"couth\",\n  \"guyed\",\n  \"hurly\",\n  \"calix\",\n  \"filer\",\n  \"utero\",\n  \"unsay\",\n  \"weald\",\n  \"folic\",\n  \"poxed\",\n  \"anile\",\n  \"plena\",\n  \"abled\",\n  \"toyer\",\n  \"awing\",\n  \"redip\",\n  \"muter\",\n  \"smurf\",\n  \"owest\",\n  \"ftped\",\n  \"hunky\",\n  \"slier\",\n  \"fatly\",\n  \"delft\",\n  \"hiver\",\n  \"himbo\",\n  \"pengo\",\n  \"aport\",\n  \"mulct\",\n  \"barfy\",\n  \"scudo\",\n  \"knout\",\n  \"gaper\",\n  \"bhang\",\n  \"uteri\",\n  \"paten\",\n  \"ombre\",\n  \"styli\",\n  \"gunky\",\n  \"hazer\",\n  \"kenaf\",\n  \"paren\",\n  \"fetor\",\n  \"techy\",\n  \"lieth\",\n  \"darky\",\n  \"gluon\",\n  \"socle\",\n  \"ruing\",\n  \"swive\",\n  \"arity\",\n  \"oinky\",\n  \"picot\",\n  \"snarf\",\n  \"stogy\",\n  \"morel\",\n  \"sware\",\n  \"doxie\",\n  \"buena\",\n  \"mohel\",\n  \"unmap\",\n  \"folia\",\n  \"rawly\",\n  \"snark\",\n  \"diest\",\n  \"forky\",\n  \"turdy\",\n  \"lawzy\",\n  \"beano\",\n  \"muley\",\n  \"barky\",\n  \"auric\",\n  \"cordy\",\n  \"curdy\",\n  \"toric\",\n  \"reman\",\n  \"mungy\",\n  \"carpy\",\n  \"apish\",\n  \"oaten\",\n  \"bract\",\n  \"axled\",\n  \"sizer\",\n  \"proem\",\n  \"turfy\",\n  \"impro\",\n  \"mashy\",\n  \"agley\",\n  \"corgi\",\n  \"dashy\",\n  \"doser\",\n  \"xored\",\n  \"laker\",\n  \"selah\",\n  \"malty\",\n  \"dulse\",\n  \"demit\",\n  \"sawer\",\n  \"bedim\",\n  \"azoic\",\n  \"wizen\",\n  \"koine\",\n  \"feral\",\n  \"lased\",\n  \"cozen\",\n  \"unhit\",\n  \"aitch\",\n  \"sedum\",\n  \"coper\",\n  \"ruche\",\n  \"algin\",\n  \"holer\",\n  \"doter\",\n  \"besot\",\n  \"dicut\",\n  \"macer\",\n  \"pewit\",\n  \"redox\",\n  \"poler\",\n  \"fluky\",\n  \"doeth\",\n  \"bider\",\n  \"gluer\",\n  \"pilau\",\n  \"whelm\",\n  \"lacer\",\n  \"inode\",\n  \"gator\",\n  \"cuing\",\n  \"refly\",\n  \"luted\",\n  \"bairn\",\n  \"bight\",\n  \"crump\",\n  \"morph\",\n  \"typal\",\n  \"oxlip\",\n  \"login\",\n  \"agone\",\n  \"unsex\",\n  \"toile\",\n  \"zombi\",\n  \"ixnay\",\n  \"dovey\",\n  \"holey\",\n  \"cuber\",\n  \"podia\",\n  \"chino\",\n  \"lycra\",\n  \"primo\",\n  \"hempy\",\n  \"hying\",\n  \"fuzed\",\n  \"crink\",\n  \"yerba\",\n  \"rhumb\",\n  \"unarc\",\n  \"munge\",\n  \"eland\",\n  \"unfix\",\n  \"brusk\",\n  \"prest\",\n  \"kelpy\",\n  \"dicky\",\n  \"nerdy\",\n  \"abend\",\n  \"stela\",\n  \"laved\",\n  \"baldy\",\n  \"wonky\",\n  \"stied\",\n  \"spumy\",\n  \"osier\",\n  \"roble\",\n  \"rumba\",\n];\n","import React, {\n  createContext,\n  useContext,\n  useState,\n  useMemo,\n  useCallback,\n} from \"react\";\nimport { range } from \"lodash\";\n\nimport { processGuess, indexFromChar, legalWords } from \"../utils\";\n\nclass LetterStatus {\n  guessed: boolean;\n  status?: boolean;\n\n  constructor() {\n    this.guessed = false;\n  }\n\n  getNextStatus() {\n    if (this.status === true) {\n      return undefined;\n    } else if (this.status === false) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\ninterface GuessEntry {\n  guess: string;\n  overlap: number;\n}\n\nexport interface GameContextValue {\n  target: string;\n  letterStatuses: LetterStatus[];\n  toggleLetter: (letter: string) => void;\n  globalError: string | null;\n  guesses: GuessEntry[];\n  addGuess: (guess: string) => void;\n  success: boolean;\n  reset: () => void;\n  clearAnnotations: () => void;\n  revealed: boolean;\n  setRevealed: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nfunction generateWord() {\n  return legalWords[\n    Math.floor(Math.random() * legalWords.length)\n  ].toUpperCase();\n}\n\nfunction useProvideGame(): GameContextValue {\n  const [target, setTarget] = useState<string>(generateWord());\n  const [globalError, setGlobalError] = useState<string | null>(null);\n\n  const initialLetterStatuses = range(0, 26).map((_i) => new LetterStatus());\n  const [letterStatuses, setLetterStatuses] = useState<LetterStatus[]>(\n    initialLetterStatuses\n  );\n\n  const [guesses, setGuesses] = useState<GuessEntry[]>([]);\n  const success = useMemo(\n    () => guesses.length > 0 && guesses[guesses.length - 1].guess === target,\n    [guesses, target]\n  );\n  const addGuess = useCallback(\n    (guess: string) => {\n      const guessUpper = guess.toUpperCase();\n      const { overlap, error: guessError } = processGuess(guessUpper, target);\n      if (guessError) {\n        setGlobalError(guessError);\n      } else {\n        setGlobalError(null);\n        // copy current statuses\n        let currStatuses = letterStatuses.slice();\n        guess.split(\"\").forEach((letter) => {\n          currStatuses[indexFromChar(letter.toUpperCase())].guessed = true;\n          setLetterStatuses(currStatuses);\n          setGuesses([...guesses, { guess: guessUpper, overlap }]);\n        });\n      }\n    },\n    [target, guesses, setGuesses, letterStatuses, setGlobalError]\n  );\n\n  const toggleLetter = (char: string) => {\n    const index = indexFromChar(char);\n    var newStatus = letterStatuses.slice();\n    newStatus[index].status = letterStatuses[index].getNextStatus();\n    setLetterStatuses(newStatus);\n  };\n\n  const clearAnnotations = () => {\n    const newLetterStatuses = letterStatuses.slice();\n    newLetterStatuses.forEach((entry) => (entry.status = undefined));\n    setLetterStatuses(newLetterStatuses);\n  };\n\n  const [revealed, setRevealed] = useState<boolean>(false);\n\n  const reset = () => {\n    const newWord = generateWord();\n    setTarget(newWord);\n    setGuesses([]);\n    setLetterStatuses(initialLetterStatuses);\n    setRevealed(false);\n  };\n\n  return {\n    target,\n    letterStatuses,\n    toggleLetter,\n    globalError,\n    guesses,\n    addGuess,\n    success,\n    reset,\n    clearAnnotations,\n    revealed,\n    setRevealed,\n  };\n}\n\nconst GameContext = createContext<GameContextValue | null>(null);\n\nexport default function GameProvider({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const value = useProvideGame();\n\n  return <GameContext.Provider value={value}>{children}</GameContext.Provider>;\n}\n\nexport const useGame = () => {\n  return useContext(GameContext);\n};\n","import React, { useCallback, useState } from \"react\";\n\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Drawer from \"@mui/material/Drawer\";\nimport Stack from \"@mui/material/Stack\";\nimport Typography from \"@mui/material/Typography\";\nimport MenuIcon from \"@mui/icons-material/Menu\";\n\nimport theme from \"../theme\";\n\nexport default function Menu() {\n  const [drawerOpen, setDrawerOpen] = useState<boolean>(false);\n  const toggleDrawer = useCallback(\n    () => setDrawerOpen(!drawerOpen),\n    [drawerOpen, setDrawerOpen]\n  );\n\n  return (\n    <Box sx={{ display: \"flex\" }}>\n      <Stack\n        direction=\"row\"\n        justifyContent=\"flex-start\"\n        alignItems=\"center\"\n        sx={{ height: theme.appBarHeight, px: 3, py: \"auto\" }}\n      >\n        <Button variant=\"text\" startIcon={<MenuIcon />} onClick={toggleDrawer}>\n          How To Play\n        </Button>\n      </Stack>\n      <Drawer\n        anchor=\"top\"\n        open={drawerOpen}\n        onClose={() => setDrawerOpen(false)}\n        sx={{\n          [`& .MuiDrawer-paper`]: {\n            top: theme.appBarHeight,\n            minHeight: { xs: `calc(100vh - ${theme.appBarHeight}px)`, md: 0 },\n            maxHeight: `calc(100vh - ${theme.appBarHeight}px)`,\n          },\n        }}\n      >\n        <Stack sx={{ px: 3, py: 2 }} spacing={2}>\n          <Typography variant=\"h4\">Rules of Jotto</Typography>\n          <Typography variant=\"body1\">\n            \"Legal Jotto words\" are five-letter words with no repeating letters\n            and that do not end in \"s.\" The computer will select a random legal\n            Jotto word as a target. The user can make guesses consisting of\n            other legal Jotto words. The program will inform the user how many\n            letters are in common between the target word and guess word\n            (independent of position). The goal is to guess the target word in\n            the least possible number of guesses.\n          </Typography>\n          <Typography variant=\"h4\">Using the Interface</Typography>\n          <Typography variant=\"body1\">\n            Letters can be marked as \"sure no\" (red) by clicking once and \"sure\n            yes\" (green) by clicking twice. To reset, click a third time.\n          </Typography>\n        </Stack>\n      </Drawer>\n    </Box>\n  );\n}\n","import React, { useMemo } from \"react\";\nimport Button from \"@mui/material/Button\";\n\nimport { GameContextValue, useGame } from \"../contexts/GameProvider\";\nimport { indexFromChar } from \"../utils\";\n\ninterface Props {\n  value: string;\n}\n\nexport default function Letter({ value }: Props) {\n  // @ts-ignore\n  const { letterStatuses, toggleLetter }: GameContextValue = useGame();\n  const status = useMemo(\n    () => letterStatuses[indexFromChar(value)].status,\n    [letterStatuses, value]\n  );\n\n  return (\n    <Button\n      sx={{\n        height: { xs: \"2.4rem\", md: \"3.2rem\" },\n        width: { xs: \"2.4rem\", md: \"3.2rem\" },\n        borderRadius: 0,\n      }}\n      onClick={() => toggleLetter(value)}\n      color={\n        status === true ? \"info\" : status === false ? \"warning\" : \"secondary\"\n      }\n      variant={status === true || status === false ? \"contained\" : \"text\"}\n    >\n      {value}\n    </Button>\n  );\n}\n","import React from \"react\";\n\nimport Stack from \"@mui/material/Stack\";\nimport Typography from \"@mui/material/Typography\";\n\nimport Letter from \"./Letter\";\n\ninterface Props {\n  word: string;\n  overlapCount: number;\n}\n\nexport default function Guess({ word, overlapCount }: Props) {\n  return (\n    <Stack direction=\"row\" alignItems=\"center\">\n      {word\n        .toUpperCase()\n        .split(\"\")\n        .map((char, ix) => (\n          <Letter key={ix} value={char} />\n        ))}\n\n      <Typography sx={{ ml: 3 }}>{overlapCount}</Typography>\n    </Stack>\n  );\n}\n","import React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Typography from \"@mui/material/Typography\";\nimport theme from \"../theme\";\n\nimport Guess from \"./Guess\";\nimport { GameContextValue, useGame } from \"../contexts/GameProvider\";\n\nexport default function GuessArea() {\n  // @ts-ignore\n  const { guesses }: GameContextValue = useGame();\n  return (\n    <Box\n      sx={{\n        width: { xs: \"100%\", md: \"320px\" },\n        position: \"relative\",\n        borderColor: theme.palette.primary.light,\n        px: 2,\n        pb: 3,\n      }}\n    >\n      <Typography variant=\"subtitle1\">Your guesses:</Typography>\n      <Box sx={{ maxHeight: \"100%\", overflow: \"auto\", pr: 3 }}>\n        {guesses.map((guess) => (\n          <Guess word={guess.guess} overlapCount={guess.overlap} />\n        ))}\n      </Box>\n    </Box>\n  );\n}\n","import React, { useEffect } from \"react\";\n\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\n\nimport Letter from \"./Letter\";\nimport { charFromIndex } from \"../utils\";\nimport { useGame, GameContextValue } from \"../contexts/GameProvider\";\n\ninterface Props {\n  shouldBeGuessed: boolean;\n  title: string;\n}\n\nexport default function LetterGroup({ shouldBeGuessed, title }: Props) {\n  // @ts-ignore\n  const { letterStatuses }: GameContextValue = useGame();\n  useEffect(() => {\n    console.log(letterStatuses);\n  }, [letterStatuses]);\n  return (\n    <>\n      <Grid item xs={12} md={6} sx={{ padding: 2 }}>\n        <Typography variant=\"subtitle2\">{title}</Typography>\n\n        {letterStatuses.map(({ status, guessed }, ix) => {\n          const char = charFromIndex(ix);\n          return guessed === shouldBeGuessed ? (\n            <Letter key={char} value={char} />\n          ) : (\n            <></>\n          );\n        })}\n      </Grid>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport Typography from \"@mui/material/Typography\";\n\nimport { GameContextValue, useGame } from \"../contexts/GameProvider\";\n\nexport default function GuessInput() {\n  // @ts-ignore\n  const { addGuess: onSubmit, guesses, revealed, target, success }: GameContextValue = useGame();\n\n  const [value, setValue] = useState(\"\");\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(event.target.value);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    onSubmit(value);\n    event.preventDefault();\n    setValue(\"\");\n  };\n\n  if (revealed) {\n    return (\n      <>\n        <Typography variant=\"subtitle1\">\n          {`The word was ${target.toUpperCase()}.`}\n        </Typography>\n        <Typography variant=\"body1\" sx={{mb: 3}}>\n          Better luck next time!\n        </Typography>\n      </>\n    );\n  }\n\n  if (success) {\n    return (\n      <>\n        <Typography variant=\"subtitle1\">\n          Success!\n        </Typography>\n        <Typography variant=\"body1\" sx={{mb: 3}}>\n          {`You successfully guessed ${target} after ${guesses.length} guesses.`}\n        </Typography>\n      </>\n    );\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <TextField\n        fullWidth\n        hiddenLabel\n        id=\"guess-input\"\n        label=\"Make a guess\"\n        value={value}\n        onChange={handleChange}\n        size=\"small\"\n      />\n      <Button fullWidth sx={{ my: 2 }} type=\"submit\">\n        Submit\n      </Button>\n    </form>\n  );\n}\n","import React from \"react\";\nimport Alert from \"@mui/material/Alert\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Grid from \"@mui/material/Grid\";\n\nimport LetterGroup from \"./LetterGroup\";\nimport GuessInput from \"./GuessInput\";\nimport { useGame } from \"../contexts/GameProvider\";\n\nexport default function LetterArea() {\n  // @ts-ignore\n  const { reset, clearAnnotations, globalError, revealed, setRevealed } =\n    useGame();\n  return (\n    <Box\n      sx={{\n        width: { xs: \"100%\", md: \"640px\" },\n      }}\n    >\n      <Grid container>\n        <Grid item xs={12} md={6} sx={{ px: 2 }}>\n          <GuessInput />\n          {globalError && <Alert severity=\"error\">{globalError}</Alert>}\n        </Grid>\n        <Grid item xs={12} md={6} sx={{ px: 2 }}>\n          <Button\n            variant=\"outlined\"\n            disabled={revealed}\n            fullWidth\n            sx={{ mb: 2 }}\n            onClick={clearAnnotations}\n          >\n            Clear Annotations\n          </Button>\n          <Button\n            variant=\"outlined\"\n            fullWidth\n            sx={{ mb: 2 }}\n            onClick={() => setRevealed(true)}\n            disabled={revealed}\n          >\n            Reveal Word\n          </Button>\n          <Button\n            variant={revealed ? \"contained\" : \"outlined\"}\n            fullWidth\n            sx={{ mb: 2 }}\n            onClick={reset}\n          >\n            Reset\n          </Button>\n        </Grid>\n        <LetterGroup title=\"Not Yet Used\" shouldBeGuessed={false} />\n        <LetterGroup title=\"Used\" shouldBeGuessed={true} />\n      </Grid>\n    </Box>\n  );\n}\n","import React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Stack from \"@mui/material/Stack\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport { ThemeProvider } from \"@mui/material/styles\";\n\nimport theme from \"../theme\";\nimport GameProvider from \"../contexts/GameProvider\";\nimport Menu from \"../components/Menu\";\nimport GuessArea from \"./GuessArea\";\nimport LetterArea from \"./LetterArea\";\n\nexport default function Game() {\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <GameProvider>\n        <Box sx={{ display: \"flex\", position: \"relative\", minHeight: \"100vh\" }}>\n          <Box\n            sx={{\n              backgroundColor: theme.palette.background.default,\n              position: \"fixed\",\n              top: 0,\n              left: 0,\n              width: \"100%\",\n              zIndex: (theme) => theme.zIndex.drawer + 1,\n            }}\n          >\n            <Menu />\n          </Box>\n          <Box\n            sx={{\n              position: \"absolute\",\n              top: theme.appBarHeight,\n              width: \"100%\",\n              pt: 1,\n              height: `calc(100vh - ${theme.appBarHeight}px)`,\n              display: \"flex\",\n              justifyContent: { xs: \"stretch\", md: \"center\" },\n            }}\n          >\n            <Stack\n              direction={{ xs: \"column\", md: \"row\" }}\n              spacing={2}\n              sx={{\n                maxHeight: {\n                  xs: \"none\",\n                  md: `calc(100vh - ${theme.appBarHeight}px)`,\n                },\n              }}\n            >\n              <LetterArea />\n              <GuessArea />\n            </Stack>\n          </Box>\n        </Box>\n      </GameProvider>\n    </ThemeProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport \"./index.scss\"\nimport Game from \"./components/Game\"\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);"],"sourceRoot":""}